Most Efficient solution for roating an matrix around 90 degrees is to transpose the matrix and then flip it along the main diagonal.

Analysing the time complexity using std::reverse function which used in using_transpose_swap_and_reverse_function.cpp program:

The time complexity of reverse function is O(n).

            :::::::::::::::

        for(int i=0;i<matrix.size();i++){
            reverse(matrix[i].begin(),matrix[i].end());
        }

            :::::::::::::::
The time complexity of the above code is O(n*n) = O(n^2).

So, to reduce the time complexity in the inner function, instead of reverse function from STL we can use two pointer method.

Anlaysing the time complexity using two pointer concept which is used using_two_pointer.cpp program:

The time complexity of two pointer is O(log n).

            ::::::::::::::
            for(int i=0;i<matrix.size();i++){
                low=0;
                high=matrix.size()-1;
                    
                while(low<high){
                    temp=matrix[i][low];
                    matrix[i][low]=matrix[i][high];
                    matrix[i][high]=temp;
                    low++;
                    high--;
                }
            }
            ::::::::::::::
The time complexity of the above code is O(n*log n) = O(nlog n).





